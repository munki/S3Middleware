//
//  S3MiddlewareTests.swift
//  S3MiddlewareTests
//
//  Created by Greg Neagle on 5/15/25.
//

import CryptoKit
import Foundation
import Testing

struct S3MiddlewareTests {
    /// a consistent text fixture
    func headersBuilder() -> S3RequestHeadersBuilder {
        return S3RequestHeadersBuilder(
            url: URL(string: "https://example.com")!,
            amzDate: "20250513T150921Z",
            datestamp: "20250513",
            accessKey: "FOO",
            secretKey: "BAR",
            region: "BAZ"
        )
    }

    /// This simply tests that the sign function produces the same output as in
    /// the Python version of this plugin
    @Test func signGeneratesExpected() {
        let key = sign(key: Data("FOO".utf8), message: "BAR").base64EncodedString()
        #expect(key == "fk+tOTds7rkT7JbQxHyqlAw5745HM/T6PNUe4/V9WVU=")
    }

    /// Tests if generated request hash is the same as that generated by the Python version
    @Test func canonicalRequestHashIsExpected() {
        let builder = headersBuilder()
        builder.createCanonicalRequestHash()
        #expect(builder.hashedRequest ==
            "483d56658251ef4f6adb7a8d16d9967985a798e421da7cfc4f943cb1a8b33fc2")
    }

    /// Tests if generated stringToSign is the same as that generated by the Python version
    @Test func stringToSignIsExpected() {
        let expectedStringToSign = """
        AWS4-HMAC-SHA256
        20250513T150921Z
        20250513/BAZ/s3/aws4_request
        483d56658251ef4f6adb7a8d16d9967985a798e421da7cfc4f943cb1a8b33fc2
        """
        let builder = headersBuilder()
        builder.createCanonicalRequestHash()
        #expect(builder.stringToSign() == expectedStringToSign)
    }

    /// This tests that the generated signing key matches that generated
    /// by the Python version of this plugin
    @Test func getSignatureKeyGeneratesExpected() {
        let signingKey = headersBuilder().createSignatureKey()

        #expect(signingKey.base64EncodedString() == "pidbX12YR7des1kzcj/FgFejlS15yW+OGrR9NPNR2R4=")
    }

    /// This simply tests that the generated signature matches that generated
    /// by the Python version of this plugin
    @Test func signingRequestGeneratesExpected() {
        let builder = headersBuilder()
        let signingKey = builder.createSignatureKey()
        let signature = HMAC<SHA256>.authenticationCode(
            for: Data(builder.stringToSign().utf8),
            using: SymmetricKey(data: signingKey)
        ).compactMap { String(format: "%02x", $0) }.joined()
        #expect(signature == "e61c7ab72b15ddd42c9b5b632228ae871cbdc32e490ca661b98c27c8fd6078fb")
    }

    @Test func generatedHeadersAreExpected() {
        let builder = headersBuilder()
        let headers = builder.createHeaders()
        let x_amz_date = headers["x-amz-date"] ?? ""
        let x_amz_content_sha256 = headers["x-amz-content-sha256"] ?? ""
        let authorization = headers["Authorization"] ?? ""
        #expect(x_amz_date == "20250513T150921Z")
        #expect(x_amz_content_sha256 == "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
        #expect(authorization == "AWS4-HMAC-SHA256 Credential=FOO/20250513/BAZ/s3/aws4_request, SignedHeaders=host;x-amz-date, Signature=e61c7ab72b15ddd42c9b5b632228ae871cbdc32e490ca661b98c27c8fd6078fb")
    }
    
    /// Test that a non-S3 request is returned unmodified
    @Test func nonS3RequestShouldNotBeModified() async throws {
        let request = MunkiMiddlewareRequest(
            url: "https://example.com",
            headers: [:]
        )
        // currently MunkiMiddlewareRequest structs are not directly comparable, so we''ll just
        // compare the instance variables
        let processedRequest = S3Middleware().processRequest(request)
        #expect(processedRequest.url == request.url)
        #expect(processedRequest.headers == request.headers)
    }
}
